//TODO - Routing, Prop drilling, Context API
 

 //NOTE - Client side routing
 In simple words csr is a technique where the routing is handled on the client side (browser) instead of the server side. 
 In csr, when a user navigates to a different page, the browser dynamically updates the content without making a full page reload. 
 This results in a smoother and faster user experience.

//NOTE - Server side routing
In server side routing, when a user navigates to a different page, the browser sends a request to the server for the new page.
The server then processes the request and sends back the complete HTML for the new page, resulting in a full page reload.

//NOTE - Client Side Bundle
A client side bundle is a single file that contains all the necessary code and resources for a web application to run in the browser.
This bundle is typically created using a build tool like Webpack or Parcel, which takes all the individual files (JavaScript, CSS, images, etc.) and
combines them into a single file that can be easily loaded by the browser.
The client side bundle is then served to the browser when the user first visits the web application, 
allowing the application to run without needing to make additional requests for each individual file.

//NOTE - window.location.href
Is used to navigate to a different URL by setting the href property of the window.location object to the desired URL.
When this property is set, the browser will navigate to the new URL, resulting in a full page reload.

code -   <button onClick={()=> 
          window.location.href = "/landing"
        }>Go to Landing</button>

//NOTE - Broweser Router (NOT MOSTLY USED)
In simple words, BrowserRouter is a component provided by the React Router library that enables client-side routing in a React application.
code -  <button onClick={()=> 
          window.location.href = "/landing"
        }>
          Go to Dashboard
        </button>

//NOTE - useNavigate (MOSTLY USED)
In simple words, useNavigate is a hook provided by the React Router library that allows you to programmatically
navigate to different routes within a React application.
code - const navigate = useNavigate();
       <button onClick={()=> navigate("/landing")}>
          Go to Landing
        </button>

//NOTE - Lazy Loading
In simple words, lazy loading is a technique used in web development to improve the performance of a web application by 
loading only the necessary resources when they are needed, rather than loading everything upfront.
This can help reduce the initial load time of a web application, as well as improve the overall user experience by making the application feel faster and more responsive.
syntax - const Landing = React.lazy(() => import('./Landing'));    
        <Suspense fallback={<div>Loading...</div>}>
          <Landing />
        </Suspense>

//NOTE - Prop Drilling
In simple words, prop drilling is a term used in React to describe the process of passing data from a parent component to a deeply
nested child component through multiple layers of intermediate components.
This can lead to code that is difficult to maintain and understand, as the data has to be passed through many layers of components 
that may not need to use the data themselves.
To avoid prop drilling, developers can use techniques such as context API or state management libraries 
like Redux to manage and share data across components more efficiently

//NOTE - Suspense API
In simple words, Suspense is a component provided by React that allows you to handle the loading state of components that are being loaded 
asynchronously.
It is often used in conjunction with React.lazy() to enable code-splitting and lazy loading of components.
When a component is wrapped in a Suspense component, React will display a fallback UI (such as a loading spinner) while the component is being loaded.
Once the component has finished loading, React will replace the fallback UI with the actual component.
syntax - <Suspense fallback={<div>Loading...</div>}>
          <Landing />
        </Suspense> 

//NOTE - Context API
In simple words, Context API is a feature in React that allows you to share data between components without having to pass the data through multiple layers of props.
It provides a way to create a global state that can be accessed by any component in the component tree, 
regardless of how deeply nested the component is.
This can help simplify the code and make it easier to maintain, especially in larger applications where many components need to access the same data.
syntax - const UserContext = React.createContext();
        <UserContext.Provider value={{user, setUser}}>
          <ComponentA />
        </UserContext.Provider>
        const {user, setUser} = useContext(UserContext);